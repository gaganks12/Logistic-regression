# -*- coding: utf-8 -*-
"""multi_label.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yj8U2DQZStg_-EOz-ZXVutogekZlh8HE
"""


import pandas as pd
import numpy as np
import json
import nltk
import re
import csv
import matplotlib.pyplot as plt 
import seaborn as sns
from tqdm import tqdm
from io import StringIO
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split

# %matplotlib inline
#pd.set_option('display.max_colwidth', 300)


# code for importing local files in Colab
#from google.colab import files 
#uploaded = files.upload()

#import io
#df2 = pd.read_csv(io.BytesIO(uploaded['text_emotion.csv']),sep=',')
#df2.head()


#reading emotions file
df2=pd.read_csv('text_emotion.csv')
col = ['sentiment', 'content']
df = df2[col]
df.head()
df.isna().sum()# checking null values
#df = df[pd.notnull(df['Consumer complaint narrative'])]
#df.isna().sum()
df.head()
df.columns = ['sentiment', 'content']
df['id'] = df['sentiment'].factorize()[0]
df.head()
category_id_df=df[["sentiment",'id']].drop_duplicates().sort_values('id')
category_to_id = dict(category_id_df.values)
id_to_category = dict(category_id_df[['id', 'sentiment']].values)
df.head()


fig = plt.figure(figsize=(8,6))
df.groupby('sentiment').content.count().plot.bar(ylim=0)
plt.show()




from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
tfidf = TfidfVectorizer(sublinear_tf=True, min_df=5, norm='l2', encoding='latin-1', ngram_range=(1, 2), stop_words='english')
features = tfidf.fit_transform(df.content).toarray()
labels = df.id
features.shape
from sklearn.feature_selection import chi2
import numpy as np
N=2
for product,cat_id in sorted(category_to_id.items()):
    featur_chi=chi2(features,labels==cat_id)
    indices=np.argsort(featur_chi[0])
    feature_names=np.array(tfidf.get_feature_names())[indices]
    #unigrams=[v for v in feature_names if len(v.split(' '))==1]
    #bigrams=[v for v in feature_names if len(v.split(' '))==2]
        
  
    #print("{}".format(product))
    #print("unigrams {}".format('\n. '.join(unigrams[-N:])))
    #print('bigrams {}'.format(bigrams[-N:]))
        


X_train,X_test,y_train,y_test=train_test_split(df['content'],df['sentiment'])
count_vect = CountVectorizer()
X_train_counts = count_vect.fit_transform(X_train)
X_test_counts=count_vect.transform(X_test)
tfidf_transformer = TfidfTransformer()
#X_test_tfidf=tfidf_transformer.transform(X_test_counts)
X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)

clf = LinearSVC().fit(X_train_tfidf, y_train)

predictions=clf.predict(X_test_counts)

print(accuracy_score(y_test, predictions))
print(confusion_matrix(y_test, predictions))
print(classification_report(y_test, predictions))

    
    
#prediction for the given review
inp=input("enter sentence")
print(clf.predict(count_vect.transform([inp])))
